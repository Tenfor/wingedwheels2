local druid = require("druid.druid")
local gameSettings = require "main/gameSettings"
local gameModel = require "main/game/gameModel"
local bridge = require("bridge.bridge")

local function translateToRussian(self)
	local hsText = gui.get_node("highscoreText")
	gui.set_font(hsText, "rufont")
	gui.set_text(hsText, "Личный рекорд")

	local startText = gui.get_node("text")
	gui.set_font(startText, "rufont")
	gui.set_text(startText, "Играть")

	local upgradesText = gui.get_node("upgradesText")
	gui.set_font(upgradesText, "rufont")
	gui.set_text(upgradesText, "Улучшения")

	local garageText = gui.get_node("garageText")
	gui.set_font(garageText, "rufont")
	gui.set_text(garageText, "Гараж")

	local logoNode = gui.get_node("logo")
	gui.play_flipbook(logoNode, "russian_logo")
	gui.set_scale(logoNode, vmath.vector3(0.43,0.43,1))
	pos = gui.get_position(logoNode)
	pos.x = pos.x+5
	gui.set_position(logoNode, pos)
end

local function saveMusicSoundSettings()	
	bridge.storage.set ({ 
		musicOff = not gameSettings.music,
		soundOff = not gameSettings.sounds
	})
end

local function onUpgradesButton(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	msg.post("main:/loader#loader", "show_upgrades")
	msg.post("main:/loader#loader", "hide_menu")
end

local function onSettingsButton(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	msg.post("main:/loader#loader", "show_settings")
	msg.post("main:/loader#loader", "hide_menu")
end

local function onGarageButton(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	msg.post("main:/loader#loader", "show_garage")
	msg.post("main:/loader#loader", "hide_menu")
end

local function onStartButton(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	msg.post("game:/soundController", "stopMusic", {url = "#menuMusic"} )
	msg.post("#","hide_menu")
	msg.post("game:/scoreGui#scoreHP", "show_gui")
	msg.post("game:/car", "enter")
	msg.post("game:/ship", "enter")
	msg.post("main:/loader#loader", "show_pause")
	gameModel.setIsStarted(true)
	bridge.platform.send_message("gameplay_started");
end

local function onCreditsButton(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	msg.post("main:/loader#loader", "show_credits")
	msg.post("main:/loader#loader", "hide_menu")
end

local function onHighscores(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	msg.post("main:/loader#loader", "show_highscores")
	msg.post("main:/loader#loader", "hide_menu")
end

local function onMusicButton(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	gameSettings.setMusic(not gameSettings.music)
	msg.post("game:/soundController", "toggle_musics")
if gameSettings.music then
	gui.play_flipbook(self.musicButtonNode, "Music_BTN")
		msg.post("game:/soundController", "stopMusic", {url = "#menuMusic"} )
		msg.post("game:/soundController", "playMusic", {url = "#menuMusic"} )
	else
		gui.play_flipbook(self.musicButtonNode, "Musicoff_BTN")
	end
	saveMusicSoundSettings()
end

local function onSoundButton(self)
	gameSettings.setSounds(not gameSettings.sounds)
	msg.post("game:/soundController", "toggle_sounds")
--	local btnText = gui.get_node("soundText")
if gameSettings.sounds then
		msg.post("game:/soundController", "playSfx", {url = "#tick"} )
		gui.play_flipbook(self.soundButtonNode, "Sound_BTN")
	else
		gui.play_flipbook(self.soundButtonNode, "Soundoff_BTN")
	end
	saveMusicSoundSettings()
end

local function initMusicSoundTexts(self)
--	local musicTextNode = gui.get_node("musicText")
--	local soundTextNode = gui.get_node("soundText")	
	if not gameSettings.sounds then 
		gui.play_flipbook(self.soundButtonNode, "Soundoff_BTN")
	end
	if not gameSettings.music then 
		gui.play_flipbook(self.musicButtonNode, "Musicoff_BTN")
	end
end

local function hideHighScores(self)
	gui.set_enabled(self.highscoresButtonNode, false)

	local musicButtonPos = gui.get_position(self.musicButtonNode)
	musicButtonPos.x = 108
	gui.set_position(self.musicButtonNode, musicButtonPos)

	local soundButtonPos = gui.get_position(self.soundButtonNode)
	soundButtonPos.x = 198
	gui.set_position(self.soundButtonNode, soundButtonPos)

	local settingsButtonPos = gui.get_position(self.settingsButtonNode)
	settingsButtonPos.x = 288
	gui.set_position(self.settingsButtonNode, settingsButtonPos)

	local creditsButtonPos = gui.get_position(self.creditsButtonNode)
	creditsButtonPos.x = 378
	gui.set_position(self.creditsButtonNode, creditsButtonPos)
end

function init(self)
	self.druid = druid.new(self)
	self.startButton = self.druid:new_button("start", onStartButton)
	self.musicButton = self.druid:new_button("music", onMusicButton)
	self.soundButton = self.druid:new_button("sounds", onSoundButton)
	self.musicButtonNode = gui.get_node("music")
	self.soundButtonNode = gui.get_node("sounds")

	self.upgradesButton = self.druid:new_button("upgrades", onUpgradesButton)

	self.garageButton = self.druid:new_button("garage", onGarageButton)

	self.settingsButton = self.druid:new_button("settings", onSettingsButton)
	self.settingsButtonNode = gui.get_node("settings")

	self.creditsButton = self.druid:new_button("credits", onCreditsButton)
	self.creditsButtonNode = gui.get_node("credits")
	self.highscoresButton = self.druid:new_button("highscores", onHighscores)
	self.highscoresButtonNode = gui.get_node("highscores")

	if(gameSettings.lang == "ru") then
		translateToRussian(self)
	end

	if not gameSettings.leaderBoardAvaible then
		hideHighScores(self)
	end
	
	msg.post(".", "acquire_input_focus")
	msg.post("#", "show_menu")
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	if message_id == hash("show_menu") then
		local highscoreText = gui.get_node("highscoreText")
		if gameSettings.lang == "eng" then 
			gui.set_text(highscoreText, "Personal Best: "..tostring(gameSettings.highscore))
		else
			gui.set_text(highscoreText, "Личный рекорд: "..tostring(gameSettings.highscore))
		end
		initMusicSoundTexts(self)
		msg.post("game:/soundController", "playMusic", {url = "#menuMusic"} )
	end
	if message_id == hash("hide_menu") then
		msg.post("main:/loader#loader", "hide_menu")
		self.active = false
	end
end

function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end

function final(self)
	self.druid:final()
end