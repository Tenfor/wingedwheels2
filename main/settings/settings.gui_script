local druid = require("druid.druid")
local gameSettings = require "main/gameSettings"
local garage = require "main/game/garage"
local upgrades = require "main/game/upgrades"

local function initToggleButtons(self)
	local filename = sys.get_save_file("sys_save_load", "settings")
	local data = sys.load(filename)
	if data.musicSettings ~= nil then 
		gameSettings.setMusic(data.musicSettings)
	end
	if data.soundSettings ~= nil then 
		gameSettings.setSounds(data.soundSettings)
	end
	if data.showTutorial ~= nil then 
		gameSettings.setShowTutorial(data.showTutorial)
	end

	if not gameSettings.sounds then 
		gui.play_flipbook(self.soundButtonNode, "Soundoff_BTN")
	end
	if not gameSettings.music then 
		gui.play_flipbook(self.musicButtonNode, "Musicoff_BTN")
	end
	if not gameSettings.showTutorial then 
		gui.play_flipbook(self.toggleTutButtonNode, "offBtn")
	end
end

local function saveSettings()
	local filename = sys.get_save_file("sys_save_load", "settings")
	sys.save(filename, { musicSettings = gameSettings.music, soundSettings = gameSettings.sounds, showTutorial = gameSettings.showTutorial })
end

local function onMusicButton(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	gameSettings.setMusic(not gameSettings.music)
	msg.post("game:/soundController", "toggle_musics")
	if gameSettings.music then
		gui.play_flipbook(self.musicButtonNode, "Music_BTN")
		msg.post("game:/soundController", "stopMusic", {url = "#menuMusic"} )
		msg.post("game:/soundController", "playMusic", {url = "#menuMusic"} )
	else
		gui.play_flipbook(self.musicButtonNode, "Musicoff_BTN")
	end
	saveSettings()
end

local function onTutorialToggle(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	gameSettings.setShowTutorial(not gameSettings.showTutorial)
	if gameSettings.showTutorial then
		gui.play_flipbook(self.toggleTutButtonNode, "onBtn")
	else
		gui.play_flipbook(self.toggleTutButtonNode, "offBtn")
	end
	saveSettings()
end

local function onSoundButton(self)
	gameSettings.setSounds(not gameSettings.sounds)
	msg.post("game:/soundController", "toggle_sounds")
	--	local btnText = gui.get_node("soundText")
	if gameSettings.sounds then
		msg.post("game:/soundController", "playSfx", {url = "#tick"} )
		gui.play_flipbook(self.soundButtonNode, "Sound_BTN")
	else
		gui.play_flipbook(self.soundButtonNode, "Soundoff_BTN")
	end
	saveSettings()
end

local function onContinue(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	gui.set_enabled(self.panelRoot, true)
	gui.set_enabled(self.confirmPanelRoot, false)
	gui.set_enabled(self.deleteSuccessRoot, false)
end

local function onYes(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	garage.resetData();
	upgrades.resetData();
	garage.saveGarage();
	upgrades.saveUpgrades();
	local filename = sys.get_save_file("sys_save_load", "highscore")
	sys.save(filename, { highscore = 0 })
	
	gui.set_enabled(self.panelRoot, false)
	gui.set_enabled(self.confirmPanelRoot, false)
	gui.set_enabled(self.deleteSuccessRoot, true)
end

local function onNo(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	gui.set_enabled(self.panelRoot, true)
	gui.set_enabled(self.confirmPanelRoot, false)
	gui.set_enabled(self.deleteSuccessRoot, false)
end

local function onResetDataButton(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	gui.set_enabled(self.panelRoot, false)
	gui.set_enabled(self.confirmPanelRoot, true)
	gui.set_enabled(self.deleteSuccessRoot, false)
end


local function onHomeButton(self)
	msg.post("game:/soundController", "playSfx", {url = "#tick"} )
	msg.post("main:/loader#loader", "show_menu")
	msg.post("main:/loader#loader", "hide_settings")
end

function init(self)
	self.druid = druid.new(self)

	self.homeButton = self.druid:new_button("homeBtn", onHomeButton)

	self.panelRoot = gui.get_node("panelRoot")
	self.confirmPanelRoot = gui.get_node("confirmPanelRoot")
	self.deleteSuccessRoot = gui.get_node("deleteSuccessRoot")
	
	self.musicButton = self.druid:new_button("musicBtn", onMusicButton)
	self.soundButton = self.druid:new_button("soundBtn", onSoundButton)
	self.musicButtonNode = gui.get_node("musicBtn")
	self.soundButtonNode = gui.get_node("soundBtn")
	self.toggleTutButtonNode = gui.get_node("toggleTutBtn")
	self.resetDataButton = self.druid:new_button("resetDataBtn", onResetDataButton)

	self.toggleTutButton = self.druid:new_button("toggleTutBtn", onTutorialToggle)
	self.yesBtn = self.druid:new_button("yesBtn", onYes)
	self.noBtn = self.druid:new_button("noBtn", onNo)
	self.cuntinueBtn = self.druid:new_button("continueBtn", onContinue)

	gui.set_enabled(self.panelRoot, true)
	gui.set_enabled(self.confirmPanelRoot, false)
	gui.set_enabled(self.deleteSuccessRoot, false)

	msg.post("#", "show_settings")
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	if message_id == hash("show_settings") then
		initToggleButtons(self)
	end
end

function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end

function final(self)
	self.druid:final()

end