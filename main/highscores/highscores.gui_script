local druid = require("druid.druid")
local json = require("main/json")
local gameSettings = require("main/gameSettings")
local dotPositions = {-80, -40, 0, 40, 80}


local function translateToRussian(self)
	local titleText = gui.get_node("title")
	gui.set_font(titleText, "rufont")
	gui.set_text(titleText, "Рекорды")

	local loadingText = gui.get_node("loadingText")
	gui.set_font(loadingText, "rufont")
	gui.set_text(loadingText, "Получение рекордов")
end

local function hideScores(self)
	for i = 1, 10, 1 do
		gui.set_alpha(self.scoreBoxNodes[i], 0)
	end
end

local function autofit_text(node)
	local text_metrics = gui.get_text_metrics_from_node(node)
	print(text_metrics.width,gui.get_size(node).x) 
	local sc = 1
	while text_metrics.width*sc > 500 do
		sc = sc-0.1
	end
	print(sc,text_metrics.width)
	gui.set_scale(node, vmath.vector3(0.5*sc,0.5*sc,0.5*sc))
	
end

local function showScores(self)
	if not self.isFailed then
		for i = 1, 10, 1 do
			gui.set_alpha(self.scoreBoxNodes[i], 0)
			gui.animate(self.scoreBoxNodes[i], "color.w", 1, gui.EASING_LINEAR, 0.8,0.1*i)

			gui.set_text(self.rankNodes[i], tostring(i+(self.currentPage - 1)*10)..".")
			if self.decodedResponse ~= nil and #self.decodedResponse >= i+(self.currentPage - 1)*10 then
				local nameText = self.decodedResponse[(i+(self.currentPage - 1)*10)]["playerName"]
				nameText =  string.sub(nameText,1,22)
				gui.set_text(self.nameNodes[i], nameText )
				gui.set_text(self.scoreNodes[i], tostring(self.decodedResponse[(i+(self.currentPage - 1)*10)]["scores"]) )
			else
				gui.set_text(self.nameNodes[i], "Player Name" )
				gui.set_text(self.scoreNodes[i], "0" )
			end
			autofit_text(self.nameNodes[i])
		end
	end
end

local function handle_response(self, id, response)
	gui.cancel_animation(self.loadingTextNode, "color.w")
	self.isFetching = false
	if response.status == 200 or response.status == 304 then 
		self.decodedResponse = json.decode(response.response)
		gui.set_alpha(self.loadingTextNode, 0)
		showScores(self)
	else
		self.isFailed = true
		gui.set_alpha(self.loadingTextNode, 1)
		gui.set_text(self.loadingTextNode, "Connection Error")
		if gameSettings.lang == "ru" then 
			gui.set_font(self.loadingTextNode, "rufont")
			gui.set_text(self.loadingTextNode, "Ошибка сети")
		end
	end
end


local function fetchHighScores(self)
	gui.animate(self.loadingTextNode, "color.w", 0, gui.EASING_LINEAR, 1,0,nil,gui.PLAYBACK_LOOP_PINGPONG)
	self.isFetching = true
	http.request("https://tgapi-zhv2.onrender.com/scores", "GET", handle_response)
end

local function onHomeButton(self)
		msg.post("game:/soundController", "playSfx", {url = "#tick"} )
		msg.post("main:/loader#loader", "show_menu")
		msg.post("main:/loader#loader", "hide_highscores")
end

local function onNextPage(self)
	if not self.isFetching then
		msg.post("game:/soundController", "playSfx", {url = "#tick"} )
		self.currentPage = self.currentPage  + 1
		if self.currentPage > 5 then 
			self.currentPage = 1
		end

		local pos = gui.get_position(self.activeDot)
		pos.x = dotPositions[self.currentPage]
		gui.set_position(self.activeDot, pos)
		showScores(self)
	else
		msg.post("game:/soundController", "playSfx", {url = "#lock"} )
	end
end

local function onPrevPage(self)
	if not self.isFetching then
		msg.post("game:/soundController", "playSfx", {url = "#tick"} )
		self.currentPage = self.currentPage  -1
		if self.currentPage < 1 then 
			self.currentPage = 5
		end

		local pos = gui.get_position(self.activeDot)
		pos.x = dotPositions[self.currentPage]
		gui.set_position(self.activeDot, pos)
		showScores(self)
	else
		msg.post("game:/soundController", "playSfx", {url = "#lock"} )
	end
end


function init(self)
	self.druid = druid.new(self)

	self.currentPage = 1
	self.isFetching = false

	self.homeButton = self.druid:new_button("homeButton", onHomeButton)
	self.nextPageButton = self.druid:new_button("nextPage", onNextPage)
	self.prevPageButton = self.druid:new_button("prevPage", onPrevPage)

	self.activeDot = gui.get_node("activeDot")

	self.loadingTextNode = gui.get_node("loadingText")
	self.isFailed = false

	self.scoreBoxNodes = {}
	self.scoreNodes = {}
	self.rankNodes = {}
	self.nameNodes = {}
	
	for i = 1, 10, 1 do
		table.insert(self.scoreBoxNodes,gui.get_node("scoreBox"..tostring(i)))
		table.insert(self.rankNodes,gui.get_node("rank"..tostring(i)))
		table.insert(self.nameNodes,gui.get_node("name"..tostring(i)))
		table.insert(self.scoreNodes,gui.get_node("score"..tostring(i)))
	end
	--showScores(self)
	hideScores(self)
	fetchHighScores(self)
	if gameSettings.lang == "ru" then
		translateToRussian(self)
	end
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end

function final(self)
	self.druid:final()
end