local garage = require("main/game/garage")
local gameModel = require("main/game/gameModel")
local bridge = require("bridge.bridge")

local function loadGarage()
	local filename = sys.get_save_file("sys_save_load", "garage")
	local data = sys.load(filename)
	garage.setEnemyDestroyed(data.enemyDestroyed or 0)
	garage.setEventSurvived(data.eventSurvived or 0)
	garage.setDied(data.died or 0)
	garage.setPowerupCollected(data.powerupCollected or 0)
	garage.setSelectedCar(data.selectedCar or 1)
	garage.setSelectedShip(data.selectedShip or 1)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	math.randomseed(os.clock() * 100000000000)

	loadGarage()
	
	self.garageProxy = "#garageProxy"
	self.gameProxy = "#gameProxy"
	self.gameOverProxy = "#gameOverProxy"
	self.menuProxy = "#menuProxy"
	self.upgradesProxy = "#upgradesProxy"
	self.highscoresProxy = "#highscoresProxy"
	self.pauseProxy = "#pauseProxy"
	self.settingsProxy = "#settingsProxy"
	self.creditsProxy = "#creditsProxy"
	--	msg.post(self.garageProxy, "load")
	msg.post(self.menuProxy, "load")
	msg.post(self.gameProxy, "load")

	bridge.platform.send_message("game_ready");
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		msg.post(sender, "enable")
	end
	if message_id == hash("gameOver") then
		msg.post(self.gameProxy, "disable")
		msg.post(self.gameProxy, "final")
		msg.post(self.gameProxy, "unload")
		msg.post(self.gameOverProxy, "load")
	end
	if message_id == hash("startGame") then 
		msg.post(self.gameProxy, "load")
	end
	if message_id == hash("restartGame") then 
		msg.post(self.gameOverProxy, "disable")
		msg.post(self.gameOverProxy, "final")
		msg.post(self.gameOverProxy, "unload")
		msg.post(self.gameProxy, "load")
		msg.post(self.upgradesProxy, "load")
	end
	if message_id == hash("hide_pause") then 
		msg.post(self.pauseProxy, "disable")
		msg.post(self.pauseProxy, "final")
		msg.post(self.pauseProxy, "unload")
	end
	if message_id == hash("show_pause") then 
		msg.post(self.pauseProxy, "load")
	end
	if message_id == hash("show_menu") then 
		msg.post(self.menuProxy, "load")
	end
	if message_id == hash("show_upgrades") then 
		msg.post(self.upgradesProxy, "load")
	end
	if message_id == hash("show_garage") then 
		msg.post(self.garageProxy, "load")
	end
	if message_id == hash("show_settings") then 
		msg.post(self.settingsProxy, "load")
	end
	if message_id == hash("show_highscores") then 
		msg.post(self.highscoresProxy, "load")
	end
	if message_id == hash("show_credits") then 
		msg.post(self.creditsProxy, "load")
	end
	if message_id == hash("hide_credits") then 
		msg.post(self.creditsProxy, "disable")
		msg.post(self.creditsProxy, "final")
		msg.post(self.creditsProxy, "unload")
	end
	if message_id == hash("hide_menu") then 
		msg.post(self.menuProxy, "disable")
		msg.post(self.menuProxy, "final")
		msg.post(self.menuProxy, "unload")
	end
	if message_id == hash("hide_upgrades") then 
		msg.post(self.upgradesProxy, "disable")
		msg.post(self.upgradesProxy, "final")
		msg.post(self.upgradesProxy, "unload")
	end
	if message_id == hash("hide_garage") then 
		msg.post(self.garageProxy, "disable")
		msg.post(self.garageProxy, "final")
		msg.post(self.garageProxy, "unload")
	end
	if message_id == hash("hide_settings") then 
		msg.post(self.settingsProxy, "disable")
		msg.post(self.settingsProxy, "final")
		msg.post(self.settingsProxy, "unload")
	end
	if message_id == hash("hide_highscores") then 
		msg.post(self.highscoresProxy, "disable")
		msg.post(self.highscoresProxy, "final")
		msg.post(self.highscoresProxy, "unload")
	end
	if message_id == hash("toggle_pause") then
		gameModel.togglePause()
		msg.post("game:/soundController", "toggle_pause")
		if(gameModel.isPaused) then 
			bridge.platform.send_message("gameplay_stopped");
			msg.post(self.gameProxy, "set_time_step", {factor = 0, mode = 1})
		else
			bridge.platform.send_message("gameplay_started");
			msg.post(self.gameProxy, "set_time_step", {factor = 1, mode = 1})
		end
	end
end