local druid = require("druid.druid")
local gameModel =require "main/game/gameModel"
local json = require("main/json")
local upgrades  = require "main/game/upgrades"
local gameSettings = require("main/gameSettings")
local bridge = require("bridge.bridge")

local function translateToRussian(self)
	local titleText = gui.get_node("title")
	gui.set_font(titleText, "rufont")
	gui.set_text(titleText, "Игра окончена")

	local yourScoresText = gui.get_node("title1")
	gui.set_font(yourScoresText, "rufont")
	gui.set_text(yourScoresText, "Твои результаты:")

	local collectedCoinsText = gui.get_node("text3")
	gui.set_font(collectedCoinsText, "rufont")
	gui.set_text(collectedCoinsText, "Вы собрали ".. tostring(gameModel.currentScores) .." монет")

	local continueText = gui.get_node("text1")
	gui.set_font(continueText, "rufont")
	gui.set_text(continueText, "Далее")

	local loginText = gui.get_node("loginBtnText")
	gui.set_font(loginText, "rufont")
	gui.set_text(loginText, "Войдите")

	
end

local function showSuccessIcon(self,success)
	gui.set_alpha(self.successIcon, 1)
	local label = "xIcon"
	if success then 
		label = "tickIcon"
	end
	gui.play_flipbook(self.successIcon, label)
end

local function hideDescriptionText(self)
	gui.set_alpha(self.descriptionTextNode, 0)
end

local function setCheeringText(self,text,ruText)
	gui.set_alpha(self.cheeringTextNode, 1)
	gui.set_text(self.cheeringTextNode, text)

	if gameSettings.lang == "ru" then 
		gui.set_font(self.cheeringTextNode, "rufont")
		gui.set_text(self.cheeringTextNode, ruText)
	end
end


local function setDescriptionText(self,text,center,ruText)
	local pos = gui.get_position(self.descriptionTextNode)
	if(center) then
		pos.y = 426
	else
		pos.y = 240
	end
	gui.set_position(self.descriptionTextNode, pos)
	
	gui.set_alpha(self.descriptionTextNode, 1)
	gui.set_text(self.descriptionTextNode, text)

	if gameSettings.lang == "ru" then 
		gui.set_font(self.descriptionTextNode, "rufont")
		gui.set_text(self.descriptionTextNode, ruText)
	end
end

local function setLoadingText(self, text, ruText)
	gui.set_text(self.loadingTextNode, text)
	gui.animate(self.loadingTextNode, "color.w", 1, gui.EASING_LINEAR, 1,0,nil,gui.PLAYBACK_LOOP_PINGPONG)

	if gameSettings.lang == "ru" then 
		gui.set_font(self.loadingTextNode, "rufont")
		gui.set_text(self.loadingTextNode, ruText)
	end

end

local function hideLoadingText(self)
	gui.cancel_animation(self.loadingTextNode, "color.w")
	gui.set_alpha(self.loadingTextNode, 0)
end

local function handle_post_response(self, id, response)
	hideLoadingText(self)
	if response.status == 200 then 
		showSuccessIcon(self,true)
		setDescriptionText(self, "Scores submitted!\nCongratulations!", false, "Рекорд Отправлено!\nПоздравления!")
	elseif response.status == 409 then 
		local decodedResponse = json.decode(response.response)
		local minScore = decodedResponse.current.scores
		setDescriptionText(self, "Reach "..tostring(minScore+1).."\nfor a new Highscore", true, "Нужно "..tostring(minScore+1).."\nдля рекорда" )
		setCheeringText(self, "You can do it!", "Ты справишься!")
	else
		showSuccessIcon(self,false)
		setDescriptionText(self, "Connection error!", false, "Ошибка сети")
	end
end

local function onSubmit(self)
	--msg.post("soundController", "playSfx", {url="#tick"})
	setLoadingText(self,"Submitting score...", "Отправка рекорда...")
	hideDescriptionText(self)

	local playerName = bridge.player.name()
	local headers = {
		["Content-Type"] = "application/json"
	}
	
	local body = json.encode({playerName=playerName,scores=gameModel.currentScores})
	--TESZT
	--local body = json.encode({playerName="Tenfor Teszt",scores=gameModel.currentScores})
	http.request("https://tgapi-zhv2.onrender.com/scores", "POST", handle_post_response, headers, body)
	--http.request("http://localhost:3000", "POST", handle_response, headers, body2)
end

local function handle_fetch_response(self,id,response)
	hideLoadingText(self)
	if response.status == 200 or response.status == 304 then
		local decodedResponse = json.decode(response.response)
		local minScore = 0
		if #decodedResponse >= 50 then
			minScore = decodedResponse[50].scores
		end
		if gameModel.currentScores > minScore then
			setDescriptionText(self, "Congratulation!\nNew Highscore!",false, "Поздравляем!\nНовый рекорд!")			
			onSubmit(self)
		else
			setDescriptionText(self, "Reach "..tostring(minScore+1).."\nfor a new Highscore", true, "Нужно "..tostring(minScore+1).."\nдля рекорда" )
			setCheeringText(self, "You can do it!", "Ты справишься!")
		end
	else
		showSuccessIcon(self,false)
		setDescriptionText(self, "Connection Error",false,"Ошибка сети")
	end
end

local function showFailedPanel(self)
	gui.set_enabled(self.adPanel, false)
	gui.set_enabled(self.failedPanel, true)
end

local function onContinue(self)
	if not self.submitting then 
		bridge.advertisement.show_interstitial()
	end
end

local function fetchHighScores(self)
	self.isFetching = true
	gui.animate(self.loadingTextNode, "color.w", 0, gui.EASING_LINEAR, 1,0,nil,gui.PLAYBACK_LOOP_PINGPONG)
	http.request("https://tgapi-zhv2.onrender.com/scores", "GET", handle_fetch_response)
	setLoadingText(self, "Checking Highscores...", "Проверка рекордов...")
end

local function checkAuth(self)
	if not gameSettings.leaderBoardAvaible then 
		if gameModel.newHighscore then
			setDescriptionText(self, "New personal best!", true, "Новый личный\nрекорд!")
			setCheeringText(self, "Congratulations!", "Поздравляю!")
		else
			setDescriptionText(self, "Reach "..tostring(gameSettings.highscore+1).."\nfor a new Highscore", true, "Нужно "..tostring(gameSettings.highscore+1).."\nдля рекорда" )
			setCheeringText(self, "You can do it!", "Ты справишься!")
		end
	else 
		if bridge.player.is_authorized() then 
			fetchHighScores(self)
		else 
			setDescriptionText(self, "Log in to compete\non the leaderboard", true, "Войдите для\nучастия в рейтинге")
			local btnNode = gui.get_node("login")
			gui.set_enabled(btnNode, true)
		end
	end
end

local function onLogin(self)
	local loginBtnNode = gui.get_node("login")
	gui.set_enabled(loginBtnNode, false)
	
	local options = {
		yandex = {
			scopes = true
		}
	}
	
	bridge.player.authorize(
	options, 
	function ()		
		checkAuth(self)
	end, 
	function ()
		setDescriptionText(self,"Login failed\nPlease try again",true,"Ошибка входа\nПовторите попытку")
		gui.set_enabled(loginBtnNode, true)
	end)
end

function init(self)
	self.druid = druid.new(self)

	bridge.platform.send_message("gameplay_stopped");

	bridge.advertisement.on("rewarded_state_changed", function (_, state)
		if state == "rewarded" then 
			upgrades.setCoins(upgrades.coins + 50)
			upgrades.saveUpgrades()
			msg.post("main:/loader#loader", "restartGame")
		elseif state == "failed" then 
			showFailedPanel(self)
		elseif state == "closed" then 
			msg.post("main:/loader#loader", "restartGame")
		end
	end)

	bridge.advertisement.on("interstitial_state_changed", function (_, state)
		if state == "failed" then 
			msg.post("main:/loader#loader", "restartGame")
		elseif state == "closed" then 
			msg.post("main:/loader#loader", "restartGame")
		end
	end)

	self.basePanel = gui.get_node("basePanel")
	self.adPanel = gui.get_node("adPanel")
	self.failedPanel = gui.get_node("failedPanel")
	
	self.collectedCoinsText = gui.get_node("text3")
	gui.set_text(self.collectedCoinsText, "You have collected ".. tostring(gameModel.currentScores) .." coins")
	
	self.submitting = false
	self.continueButton = self.druid:new_button("continue", onContinue)
	
	self.successIcon = gui.get_node("successIcon")
	
	gui.set_text(gui.get_node("scores"), tostring(gameModel.currentScores))
	self.loadingTextNode = gui.get_node("loadingText")
	self.descriptionTextNode = gui.get_node("description")
	self.cheeringTextNode = gui.get_node("cheering")
	self.isFetching = false

	self.loginBtn = self.druid:new_button("login", onLogin)

	if gameSettings.lang == "ru" then
		translateToRussian(self)
	end

	checkAuth(self)
	--setDescriptionText(self, "Log in to compete\non the leaderboard", true, "Войдите для\nучастия в рейтинге")
	--local btnNode = gui.get_node("login")
	--gui.set_enabled(btnNode, true)
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end

function final(self)
	self.druid:final()
end