local druid = require("druid.druid")
local rich_input = require("druid.custom.rich_input.rich_input")
local const  = require("druid.const")
local gameModel =require "main/game/gameModel"
local json = require("main/json")

local function hideSuccessIcon(self)
	gui.set_alpha(self.successIcon, 0)
end

local function showSuccessIcon(self,success)
	gui.set_alpha(self.successIcon, 1)
	local label = "xIcon"
	if success then 
		label = "tickIcon"
	end
	gui.play_flipbook(self.successIcon, label)
end

local function hideDescriptionText(self)
	gui.set_alpha(self.descriptionTextNode, 0)
end

local function setDescriptionText(self,text,center)

	local pos = gui.get_position(self.descriptionTextNode)
	if(center) then
		gui.set_alpha(self.cheeringTextNode, 1)
		pos.y = 426
	else
		gui.set_alpha(self.cheeringTextNode, 0)
		pos.y = 240
	end
	gui.set_position(self.descriptionTextNode, pos)
	
	gui.set_alpha(self.descriptionTextNode, 1)
	gui.set_text(self.descriptionTextNode, text)
end

local function setLoadingText(self, text)
	gui.set_text(self.loadingTextNode, text)
	gui.animate(self.loadingTextNode, "color.w", 1, gui.EASING_LINEAR, 1,0,nil,gui.PLAYBACK_LOOP_PINGPONG)

end

local function hideLoadingText(self)
	gui.cancel_animation(self.loadingTextNode, "color.w")
	gui.set_alpha(self.loadingTextNode, 0)
end

local function hideInput(self)
	gui.set_enabled(self.rich_input_parent, false)
	gui.set_alpha(self.rich_input_parent, 0)
	gui.set_enabled(self.submitButtonNode, false)
end

local function showInput(self)
	gui.set_enabled(self.rich_input_parent, true)
	gui.set_alpha(self.rich_input_parent, 1)
	gui.set_enabled(self.submitButtonNode, true)
end

local function handle_fetch_response(self,id,response)
	hideLoadingText(self)
	if response.status == 200 or response.status == 304 then
		local decodedResponse = json.decode(response.response)
		local minScore = 0
		if #decodedResponse >= 50 then
			minScore = decodedResponse[50].scores
		end
		if gameModel.currentScores > minScore then
			setDescriptionText(self, "Congratulation!\nNew Highscore!",false)
			self.rich_input:set_placeholder("Enter Your Name")

			--set playername if its saved in localstorage
			local filename = sys.get_save_file("sys_save_load", "playerName")
			local data = sys.load(filename)
			if data.playerName then 
				self.rich_input:set_placeholder("")
				self.rich_input.input:set_text(data.playerName)
			end
			
			showInput(self)
		else
			setDescriptionText(self, "Reach "..tostring(minScore+1).."\nfor a new Highscore", true)
		end
	else
		showSuccessIcon(self,false)
		setDescriptionText(self, "Connection Error",false)
	end
end

local function handle_post_response(self, id, response)
	hideLoadingText(self)
	if response.status == 200 then 
		showSuccessIcon(self,true)
		setDescriptionText(self, "Scores submitted!\nCongratulations!")
	else
		showSuccessIcon(self,false)
		setDescriptionText(self, "Connection error!")
		timer.delay(3, false, function()
			hideSuccessIcon(self)
			setDescriptionText(self, "Congratulation!\nNew Highscore!")
			--hideDescriptionText(self)
			showInput(self)
		end)
	end
end

local function onSubmit(self)
	local playerName = self.rich_input:get_text()
	if #playerName > 0 then
		msg.post("soundController", "playSfx", {url="#tick"})
		setLoadingText(self,"Submitting score...")
		hideInput(self)
		hideDescriptionText(self)

		local filename = sys.get_save_file("sys_save_load", "playerName")
		sys.save(filename,{playerName=playerName})

		local headers = {
			["Content-Type"] = "application/json"
		}
		--local body = '{"playerName":"Test"}'
		local body = json.encode({playerName=self.rich_input:get_text(),scores=gameModel.currentScores})
		http.request("https://tgapi-8re5.onrender.com/scores", "POST", handle_post_response, headers, body)
		--http.request("http://localhost:3000", "POST", handle_response, headers, body2)
	else
		msg.post("soundController", "playSfx", {url="#lock"})
	end
end

local function onContinue(self)
	if not self.submitting then 
		msg.post("main:/loader#loader", "restartGame")
	end
end

local function fetchHighScores(self)
	self.isFetching = true
	hideInput(self)	hideDescriptionText(self)
	gui.animate(self.loadingTextNode, "color.w", 0, gui.EASING_LINEAR, 1,0,nil,gui.PLAYBACK_LOOP_PINGPONG)
	http.request("https://tgapi-8re5.onrender.com/scores", "GET", handle_fetch_response)
	setLoadingText(self, "Checking Highscores...")
end


function init(self)
	self.druid = druid.new(self)
	
	self.submitting = false

	self.rich_input = self.druid:new(rich_input, "rich_input")
	self.rich_input_parent = gui.get_node("rich_input_parent")
	self.rich_input:set_placeholder("Enter Your Name")
	self.rich_input.input:set_max_length(11)
	self.rich_input.input:set_allowed_characters("[A-Za-z0-9]")
--	self.rich_input:set_max_length(self,11)

	self.submitButton = self.druid:new_button("submit", onSubmit)
	self.continueButton = self.druid:new_button("continue", onContinue)
	self.submitButtonNode = gui.get_node("submit")

	self.successIcon = gui.get_node("successIcon")
	
	gui.set_text(gui.get_node("scores"), tostring(gameModel.currentScores))
	self.loadingTextNode = gui.get_node("loadingText")
	self.descriptionTextNode = gui.get_node("description")
	self.cheeringTextNode = gui.get_node("cheering")

	self.isFetching = false

	fetchHighScores(self)
end

function on_input(self, action_id, action)
	if action_id == const.ACTION_TEXT or action_id == const.ACTION_MARKED_TEXT then 
		if action.text == "\n" or action.text == "\r" or action.text == "" then
			return true
		end
	end
	return self.druid:on_input(action_id, action)
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end

function final(self)
	self.druid:final()
end