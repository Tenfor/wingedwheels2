go.property("target", hash(""))

local function move(self, dt)
	if self.target == nil then 
		go.delete()
	else
		local p = go.get_position()
		local targetPos = go.get_position(self.target)
		local direction = vmath.normalize(targetPos - p) 
		p = p + direction * self.speed * dt
		
		go.set_position(p)
		
		local angle = math.atan2(direction.y, direction.x) 
		local rotation = vmath.quat_rotation_z(angle - 1.57) -- -1.57 to rotate 90 degree so the rocket face to the enemy
		go.set_rotation(rotation)
	end
end

function init(self)
	self.speed = 900
	msg.post("soundController", "playSfx", {url = "#rocket"})
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	move(self, dt)
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.other_group == hash("enemy") then
			msg.post("scoreGui#scoreHP", "enemy_destroyed")
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
